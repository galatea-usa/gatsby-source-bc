{"version":3,"sources":["../src/utils/request.js"],"names":["handleBodyResponse","res","body","resolve","reject","test","headers","trim","console","error","FG_RED","JSONObject","JSONError","JSONErrors","errors","err","Error","responseBody","Request","hostname","failOnLimitReached","agent","errMessage","protocol","run","method","path","data","dataString","options","port","gzip","Object","assign","Buffer","from","length","Promise","req","https","request","log","FG_GREEN","toUpperCase","HTTPS_PROTOCOL","Math","round","statusCode","FG_BLUE","statusMessage","FG_WHITE","FG_CYAN","xRetryAfterHeader","setTimeout","FG_YELLOW","then","catch","on","chunk","zlib","gunzip","toString","write","end"],"mappings":"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","sourcesContent":["import https from \"https\";\nimport zlib from \"zlib\";\nimport { FG_BLUE, FG_CYAN, FG_GREEN, FG_RED, FG_WHITE, FG_YELLOW, HTTPS_PROTOCOL } from \"../constants\";\nimport { handleConversionObjectToString, handleConversionStringToObject, handleConversionStringToUppercase } from \"./convertValues\";\n\n// Handle parsing the response from the BigCommerce API\nfunction handleBodyResponse(res, body, resolve, reject) {\n\ttry {\n\t\tif (!/application\\/json/.test(res.headers[\"content-type\"]) || body.trim() === \"\") {\n\t\t\tconsole.error(FG_RED, \"\\nThe response body from the BigCommerce API is not in JSON format.\");\n\n\t\t\treturn resolve(body);\n\t\t}\n\n\t\t// Convert string to object\n\t\tconst JSONObject = handleConversionStringToObject(body);\n\n\t\t// Check for errors in the body response, if there is found, reject the promise\n\t\tconst JSONError = JSONObject?.error ?? null;\n\t\tconst JSONErrors = JSONObject?.errors ?? null;\n\n\t\tif (JSONError !== null || JSONErrors !== null) {\n\t\t\tconst err = new Error(JSONError || handleConversionObjectToString(JSONErrors));\n\n\t\t\treturn reject(err);\n\t\t}\n\n\t\t// Return the body response as a JSON object\n\t\treturn resolve(JSONObject);\n\t} catch (err) {\n\t\terr.responseBody = body;\n\n\t\treturn reject(err);\n\t}\n}\nclass Request {\n\tconstructor(hostname = null, { headers = {}, failOnLimitReached = false, agent = null } = {}) {\n\t\thostname == null && headers == null\n\t\t\t? (() => {\n\t\t\t\t\tconst errMessage = new Error(\"The hostname and headers are required to make the call to the server.\");\n\n\t\t\t\t\tthrow errMessage;\n\t\t\t  })()\n\t\t\t: null;\n\n\t\tthis.hostname = hostname;\n\t\tthis.headers = headers;\n\t\tthis.failOnLimitReached = failOnLimitReached;\n\t\tthis.agent = agent;\n\t\tthis.protocol = \"https:\";\n\t}\n\n\t// Handle running plugin\n\trun(method, path, data = null) {\n\t\tconst dataString = data !== null ? handleConversionObjectToString(data) : null;\n\n\t\tconst options = {\n\t\t\tpath,\n\t\t\tprotocol: this.protocol,\n\t\t\thostname: this.hostname,\n\t\t\tport: 443,\n\t\t\tmethod: handleConversionStringToUppercase(method),\n\t\t\tgzip: true,\n\t\t\theaders: Object.assign(\n\t\t\t\t{\n\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tthis.headers\n\t\t\t)\n\t\t};\n\n\t\tif (this.agent !== null) {\n\t\t\toptions.agent = this.agent;\n\t\t}\n\n\t\tif (dataString !== null) {\n\t\t\toptions.headers[\"Content-Length\"] = Buffer.from(dataString).length;\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = https.request(options, (res) => {\n\t\t\t\t// Send log message when requesting data\n\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}`);\n\n\t\t\t\tif (Math.round(res.statusCode / 100) === 2) {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_GREEN, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else if (Math.round(res.statusCode / 100) === 4 || Math.round(res.statusCode / 100) === 5) {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_RED, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_WHITE, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t}\n\n\t\t\t\tconsole.log(FG_BLUE, `\\nHeaders:`, FG_CYAN, `${handleConversionObjectToString(res.headers)}\\n`);\n\n\t\t\t\tlet body = \"\";\n\n\t\t\t\t// Handle API rate limit\n\t\t\t\tconst statusCode = res.statusCode;\n\n\t\t\t\tif (Math.round(statusCode / 100) === 4) {\n\t\t\t\t\tif (statusCode === 429) {\n\t\t\t\t\t\tconst xRetryAfterHeader = res?.headers?.[\"x-retry-after\"] ?? null;\n\n\t\t\t\t\t\tif (this.failOnLimitReached) {\n\t\t\t\t\t\t\tif (xRetryAfterHeader !== null) {\n\t\t\t\t\t\t\t\tconsole.log(FG_RED, `\\nThe BigCommerce API rate limit has been reached. Please wait ${xRetryAfterHeader} seconds before making another request.`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn setTimeout(() => {\n\t\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\t\tconsole.log(FG_YELLOW, \"\\nRestarting request...\");\n\n\t\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}\\n\\n`);\n\n\t\t\t\t\t\t\t\tthis.run(method, path, data).then(resolve).catch(reject);\n\t\t\t\t\t\t\t}, xRetryAfterHeader * 1000);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Append the response body to the body variable\n\t\t\t\tres.on(\"data\", (chunk) => (body += chunk));\n\n\t\t\t\t// End BigCommerce response execution\n\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\tif (statusCode >= 400 && statusCode <= 600) {\n\t\t\t\t\t\tconst errMessage = new Error(`BigCommerce API request failed with status code ${statusCode}.`);\n\t\t\t\t\t\terrMessage.statusCode = statusCode;\n\t\t\t\t\t\terrMessage.body = body;\n\n\t\t\t\t\t\treturn reject(errMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calling gzip method\n\t\t\t\t\treturn zlib.gzip(body, (err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Calling gunzip method\n\t\t\t\t\t\tzlib.gunzip(data, (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn handleBodyResponse(res, data.toString(\"utf8\"), resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdataString !== null\n\t\t\t\t? () => {\n\t\t\t\t\t\t// Send log message when sending data\n\t\t\t\t\t\tconsole.log(FG_YELLOW, \"\\nSending BigCommerce data...\");\n\n\t\t\t\t\t\t// Send log message when requesting data\n\t\t\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}\\n`);\n\n\t\t\t\t\t\treq.write(dataString);\n\n\t\t\t\t\t\tconsole.log(FG_GREEN, \"\\nSending complete.\");\n\t\t\t\t  }\n\t\t\t\t: null;\n\n\t\t\t// Handle BigCommerce API request errors\n\t\t\treq.on(\"error\", (err) => reject(err));\n\n\t\t\t// End BigCommerce request execution\n\t\t\treq.end();\n\t\t});\n\t}\n}\n\nexport default Request;\n"],"file":"request.js"}